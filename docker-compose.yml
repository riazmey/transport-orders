services:

  transport-orders-app:
    container_name: transport-orders-app
    hostname: transport-orders-app
    image: riazmey/transport-orders-app:latest
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - DJANGO_LOGGING_DIR=${DJANGO_LOGGING_DIR}
      - DATABASE_DB=${DATABASE_DB}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - WEB_PORT=${WEB_PORT}
      - WS_CLASSIFIERS_URL=${WS_CLASSIFIERS_URL}
    networks:
      default:
        ipv4_address: ${NETWORK_IP_APP}
    dns_search:
      - .
    ports:
      - '${WEB_PORT}:${WEB_PORT}'
    volumes:
      - source: /data/transport-orders-app/migrations-orders
        target: /app/transport-orders/orders/migrations
        read_only: false
        type: bind
        bind:
          create_host_path: true
      - source: /data/transport-orders-app/migrations-subscriptions
        target: /app/transport-orders/subscriptions/migrations
        read_only: false
        type: bind
        bind:
          create_host_path: true
    healthcheck:
      test: [ 'CMD-SHELL', 'curl --fail http://docker.ltlog.local:${WEB_PORT}/manage || exit 1' ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    depends_on:
      - transport-orders-psql

  transport-orders-psql:
    container_name: transport-orders-psql
    hostname: transport-orders-psql
    image: riazmey/transport-orders-psql:latest
    shm_size: 128mb
    environment:
      - POSTGRES_DB=${DATABASE_DB}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    networks:
      default:
        ipv4_address: ${NETWORK_IP_PSQL}
    dns_search:
      - .
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"
    volumes:
      - source: /data/transport-orders-psql
        target: /var/lib/postgresql/data
        read_only: false
        type: bind
        bind:
          create_host_path: true
      - type: tmpfs
        target: /var/run/postgresql
        read_only: false
    command: -p ${DATABASE_PORT}
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -h ${NETWORK_IP_PSQL} -p ${DATABASE_PORT} -U ${DATABASE_USER}' ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

networks:

  default:
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET}
